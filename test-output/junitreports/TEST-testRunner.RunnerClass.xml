<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite hostname="L-INE-96MWM93" failures="0" tests="83" name="testRunner.RunnerClass" time="0.993" errors="3" timestamp="2025-02-09T17:06:19 IST" skipped="0">
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.018"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.013"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.006"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.004"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.010"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.005"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.005"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008">
    <error message="The step &#039;User navigate to the Sauce Demo login page&#039; and 2 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given(&quot;User navigate to the Sauce Demo login page&quot;)
public void user_navigate_to_the_sauce_demo_login_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When(&quot;User enter valid Username and Password&quot;)
public void user_enter_valid_username_and_password() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When(&quot;User should be logged in successfully&quot;)
public void user_should_be_logged_in_successfully() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
" type="io.cucumber.testng.UndefinedStepException">
      <![CDATA[io.cucumber.testng.UndefinedStepException: The step 'User navigate to the Sauce Demo login page' and 2 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("User navigate to the Sauce Demo login page")
public void user_navigate_to_the_sauce_demo_login_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("User enter valid Username and Password")
public void user_enter_valid_username_and_password() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("User should be logged in successfully")
public void user_should_be_logged_in_successfully() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
at io.cucumber.testng.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:23)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$1(TestNGCucumberRunner.java:136)
at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:132)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:35)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
    </error>
  </testcase> <!-- runScenario -->
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.021"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.015"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.014"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.038"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.020"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.006"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.009"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.006"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.019"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.016"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.010"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.015"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.012"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.019"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.009"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.010"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.069">
    <error message="The step &#039;User navigate to the Sauce Demo login page&#039; and 2 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given(&quot;User navigate to the Sauce Demo login page&quot;)
public void user_navigate_to_the_sauce_demo_login_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When(&quot;User enter valid Username and Password&quot;)
public void user_enter_valid_username_and_password() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When(&quot;User should be logged in successfully&quot;)
public void user_should_be_logged_in_successfully() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
" type="io.cucumber.testng.UndefinedStepException">
      <![CDATA[io.cucumber.testng.UndefinedStepException: The step 'User navigate to the Sauce Demo login page' and 2 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("User navigate to the Sauce Demo login page")
public void user_navigate_to_the_sauce_demo_login_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("User enter valid Username and Password")
public void user_enter_valid_username_and_password() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("User should be logged in successfully")
public void user_should_be_logged_in_successfully() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
at io.cucumber.testng.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:23)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$1(TestNGCucumberRunner.java:136)
at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:132)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:35)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
    </error>
  </testcase> <!-- runScenario -->
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.013"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.011"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.015"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.006"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.009"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.009"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.010"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.009"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.009"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.006"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.009"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.023"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.009"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.006"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.010"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.006"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.005"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.009"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.008"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.014"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.017"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.007"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.124"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.015"/>
  <testcase classname="testRunner.RunnerClass" name="runScenario" time="0.010">
    <error message="The step &#039;User navigate to the Sauce Demo login page&#039; is undefined.
You can implement this step using the snippet(s) below:

@Given(&quot;User navigate to the Sauce Demo login page&quot;)
public void user_navigate_to_the_sauce_demo_login_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
" type="io.cucumber.testng.UndefinedStepException">
      <![CDATA[io.cucumber.testng.UndefinedStepException: The step 'User navigate to the Sauce Demo login page' is undefined.
You can implement this step using the snippet(s) below:

@Given("User navigate to the Sauce Demo login page")
public void user_navigate_to_the_sauce_demo_login_page() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
at io.cucumber.testng.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:23)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$1(TestNGCucumberRunner.java:136)
at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:132)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:35)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
    </error>
  </testcase> <!-- runScenario -->
</testsuite> <!-- testRunner.RunnerClass -->
